import { app, BrowserWindow, ipcMain } from "electron";
import dotenv from "dotenv";
import { connectDB } from "./lib/connect";
import { ResponseType, Todo, TodosResponseType } from "./types/todo";
import path from "path";
dotenv.config();

let mainWindow: BrowserWindow;
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 900,
    width: 1400,
    frame: false,
    icon: path.join(__dirname, "assets/icons/pencil.ico"),
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  mainWindow.webContents.openDevTools();
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  mainWindow.setMenu(null);
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.

app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

const db = connectDB();

ipcMain.on("health-check", async (event, msg: String) => {
  console.log(msg);
});

ipcMain.handle("create-todo", async (event, todo): Promise<ResponseType> => {
  const { id, title, description, completed, deadline, color } = todo;

  try {
    const query = `INSERT INTO todos (id , title, description, completed , deadline , color) VALUES (? , ?, ?, ? , ? , ?)`;

    await db
      .promise()
      .query(query, [id, title, description, completed, deadline, color]);
    return { success: true };
  } catch (err: any) {
    console.error("Error inserting todo:", err);
    return { success: false, error: err.message };
  }
});

ipcMain.handle(
  "delete-todo",
  async (event, todoId: number): Promise<ResponseType> => {
    try {
      const query = `DELETE FROM todos WHERE id = ?`;
      await db.promise().query(query, [todoId]);
      return { success: true };
    } catch (err: any) {
      console.error("Error deleting todo:", err);
      return { success: false, error: err.message };
    }
  }
);

ipcMain.handle("toggle-todo", async (event, todo): Promise<ResponseType> => {
  try {
    const query = `UPDATE todos SET completed=? WHERE id=?`;
    await db.promise().query(query, [todo.completed, todo.id]);
    return { success: true };
  } catch (err: any) {
    console.error("Error completing todo:", err);
    return { success: false, error: err.message };
  }
});

ipcMain.handle("edit-todo", async (event, todo): Promise<ResponseType> => {
  try {
    const query = `UPDATE todos SET title=?, description=?, completed=?, deadline=?, color=? WHERE id=?`;
    await db
      .promise()
      .query(query, [
        todo.title,
        todo.description,
        todo.completed,
        todo.deadline,
        todo.color,
        todo.id,
      ]);
    return { success: true };
  } catch (err: any) {
    console.error("Error updating todo:", err);
    return { success: false, error: err.message };
  }
});

ipcMain.handle("load-todos", async (): Promise<TodosResponseType> => {
  try {
    const query = `SELECT * FROM todos ORDER BY id ASC`;
    const [rows] = await db.promise().query(query);
    return { success: true, data: { todos: rows as Todo[] } };
  } catch (err: any) {
    console.error("Error loading todos:", err);
    return { success: false, error: err.message };
  }
});
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

// IPC event handlers (used for custom close, minimize, maximize)
ipcMain.on("window-minimize", () => {
  if (mainWindow) {
    mainWindow.minimize();
  }
});

ipcMain.on("window-maximize", () => {
  if (mainWindow) {
    if (mainWindow.isMaximized()) {
      mainWindow.unmaximize();
    } else {
      mainWindow.maximize();
    }
  }
});

ipcMain.on("window-close", () => {
  if (mainWindow) {
    mainWindow.close();
  }
});
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
